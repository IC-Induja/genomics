{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Genomics","title":"Home"},{"location":"#genomics","text":"","title":"Genomics"},{"location":"docs/AminoAcidSequence/","text":"AminoAcidSequence AminoAcidSequence(self, seq, **kwargs)","title":"AminoAcidSequence"},{"location":"docs/DNASequence/","text":"DNASequence DNASequence(self, seq, **kwargs) Abstract sequence class. Properties id (str): Identifier. Must be unique within a genome. If none is provided, uses a uuid. id_type (str): Source of identifier. data (str): Sequence contents. start_index (int): Index representing first position in data. Default 1 (as 1-indexing is common in biology). is_double_stranded (bool): Indicates whether sequence has complementary strand. Default True. find DNASequence.find(self, query, strand=None) locates query in sequence. Arguments query (string) : string to search for strand (string) : One of {'+', '-'}. If provided, find will only search the given strand. Returns Region : location of first match on sequence","title":"DNASequence"},{"location":"docs/RNASequence/","text":"RNASequence RNASequence(self, seq, **kwargs)","title":"RNASequence"},{"location":"docs/Region/","text":"Region Region(self, start, stop, strand=None, sequence=None) Description of a region on a sequence or genome. Properties start (int): stop (int): strand (str): sequence (Sequence): isCircular (bool): DisjointRegion DisjointRegion(self, start, stop, strand)","title":"Region"},{"location":"docs/Sequence/","text":"Sequence Sequence(self, seq, **kwargs) Abstract sequence class. Properties id (str): Identifier. Must be unique within a genome. If none is provided, uses a uuid. id_type (str): Source of identifier. data (str): Sequence contents. start_index (int): Index representing first position in data. Default 1 (as 1-indexing is common in biology). from_file Sequence.from_file(format=None, **kwargs) Reads sequence data from file. Accepts a variety of biological formats (FASTA, Genbank, etc.). Also can read a raw sequence from .txt Accepted File Extentions: 2bit: FASTA: .fa, .fasta (if multiline FASTA, only first sequence is returned) Genbank: .gbk GFF: .gff, .gff3 Nibble: .nib Plain Text: .txt Note: Annotation data in the file is ignored when constructing a sequence. Arguments filepath (str) : Location of file (absolute or relative filepath, or a URL) format (str) : Format of file contents. If not provided, will be inferred form file extention. Returns Sequence : sequence contained in file from_db Sequence.from_db(db='ncbi') Constructs a sequence by fetching data from a commonly used biological database. Supports NCBI, EMBL, and DDOJ databases. Arguments Returns Sequence : Sequence retreived from database. get_subsequence Sequence.get_subsequence(self, **kwargs) Gets subset of sequence. Note: subsequence is inclusive of both start and end indices. Arguments start (int) : index of first subsequence element. Defaults to start of sequence. stop (int) : index of last subsequence element. Defaults to end of sequence. reindex (bool) : if true, indexing of sequence will start at 1. Otherwise, indexing will be unchanged (ie. index of first element in sequence will be it's current position in the sequence, and so on) find Sequence.find(self, query, strand=None) locates query in sequence. Arguments query (string) : string to search for Returns Region : location of first match on sequence","title":"Sequence"}]}